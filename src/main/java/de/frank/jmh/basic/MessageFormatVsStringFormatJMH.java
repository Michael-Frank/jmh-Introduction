package de.frank.jmh.basic;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Threads;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.profile.GCProfiler;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
import sun.misc.SharedSecrets;

import java.lang.reflect.Method;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

/*--
	compare performance of various String-/Message-format implementations

    Learnings:  dont use String-/Message-formaters mindlessly in hot code paths. Most of them are fairly expensive!

	###Disclaimer##########
	all of this obviously only matters in HOT code paths
	#######################

	** SINGLE THREADED **
	Benchmark                       Mode  Cnt     Score    Error  Units
	concatString                    avgt   30    64,040 ±  0,884  ns/op <-clear winner in this case - simple and fast
	concatBuilder                   avgt   30    66,632 ±  2,369  ns/op <-only here to show that concatString and concatBuilder are equal. (compiler autogenerated) Builder is a must for stringconcat in loops an ifs
	messageFormat                   avgt   30  1055,463 ±  7,475  ns/op <-slow -may or may not be critical, depending on frequency of calls
	messageFormatExternalPattern    avgt   30  1059,719 ±  4,798  ns/op   <-storing the pattern string inside a static final field does not matter(from a performance point of view)
	messageFormatCached             avgt   30   418,931 ±  2,541  ns/op   <-but caching the pre-parsed MessageFormat pattern as a field is a good idea
	stringFormat                    avgt   30  1504,739 ± 11,420  ns/op <- much more powerful at a high price
	Bonus:
	slf4jMessageFormatter           avgt   30   310,326 ±  0,925  ns/op <- only supports simple '{}' placeholders, but very fast
    AntiPatterns:
    plusEqualsConcatAntiPattern     avgt   30    63,475 ±  0,260  ns/op <- please dont--- only "ok" in THIS case because the compiler can optimize it away. but is expensive in loops (see plusEqualsConcatAntiPatternLoop)
	plusEqualsConcatAntiPatternLoop avgt   30   242,510 ± 10,332  ns/op <- *see above*

	** Multi THREADED @16 Threads **
	Benchmark                        Mode  Cnt     Score    Error  Units
	concatString                     avgt   30   743,733 ±  7,044  ns/op
	concatBuilder                    avgt   30   757,412 ± 10,437  ns/op
	messageFormat                    avgt   30  6870,863 ± 63,098  ns/op
	messageFormatExternalPattern     avgt   30  6909,929 ± 68,382  ns/op
	messageFormatCached              avgt   30  3592,108 ± 45,346  ns/op
	stringFormat                     avgt   30  6474,507 ± 70,752  ns/op
	Bonus:
	slf4jMessageFormatter            avgt   30  2180,438 ± 20,723  ns/op
    AntiPatterns:
    plusEqualsConcatAntiPattern      avgt   30   745,061 ±  8,235  ns/op
	plusEqualsConcatAntiPatternLoop  avgt   30  3619,269 ± 34,120  ns/op


    some VERY special cases (showing what is possible) - please dont do that :-)
	Benchmark                               Mode  Cnt   Score   Error  Units
	concatBuilder_preSized                  avgt   30  66,162 ± 2,792  ns/op
	concatManualLoop_newStringUnsafe        avgt   30  98,029 ± 1,827  ns/op
	concatManualPreCalculated_sharedBuffer  avgt   30  66,880 ± 1,333  ns/op
	concatManualUnrolled_newStringUnsafe    avgt   30  85,798 ± 0,721  ns/op
	concatString                            avgt   30  64,915 ± 1,280  ns/op*/
/**
 * @author Michael Frank
 * @version 1.0 13.05.2018
 */
@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)
@Measurement(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)
@Fork(3)
@BenchmarkMode({ Mode.AverageTime })
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@State(Scope.Thread)
@Threads(1)
public class MessageFormatVsStringFormatJMH {

	private String param0 = "x-application/json";
	private String param1 = UUID.randomUUID().toString();
	private String param2 = UUID.randomUUID().toString();
	private String param3 = UUID.randomUUID().toString();

	private static final String messageFormatTemplate = "SomeToStringClass:\nparam0 {0}\nparam1 {1}\n param2 {2}\n param3 {3}";
	private static final MessageFormat messageFormat = new MessageFormat(messageFormatTemplate);

	public static void main(String[] args) throws RunnerException {
		verifyMethodsProduceSameResults();
		Options opt = new OptionsBuilder()//
				.include(".*" + MessageFormatVsStringFormatJMH.class.getSimpleName() + ".*")//
				.addProfiler(GCProfiler.class).build();
		new Runner(opt).run();
	}

	@Benchmark
	public String messageFormat() {
		String lTemplate = "SomeToStringClass:\nparam0 {0}\nparam1 {1}\nparam2 {2}\n param3 {3}";
		return MessageFormat.format(lTemplate, param0, param1, param3, param2);
	}

	@Benchmark
	public String messageFormatExternalPattern() {
		return MessageFormat.format(messageFormatTemplate, param0, param1, param3, param2);
	}

	@Benchmark
	public String messageFormatCached() {
		return messageFormat.format(new Object[] { param0, param1, param3, param2});
	}

	@Benchmark
	public String stringFormat() {
		String lTemplate = "SomeToStringClass:\nparam0 %s\nparam1 %s\nparam2 %s\n param3 %s";
		return String.format(lTemplate, param0, param1, param3, param2);
	}

	@Benchmark
	public String concatString() {
		return "SomeToStringClass:\nparam0 " + param0//
				+ "\nparam1 " + param1 //
				+ "\n param2 " + param3//
				+ "\n param3 " + param2;//
	}

	// yes - it can just be as fast as concat string in this simple case, because the
	// compiler can optimize it.
	// But this is deadly in loops! ( and its a plain ugly coding style)
	@Benchmark
	public String plusEqualsConcatAntiPattern() {
		// DONT YOU EVER DO THIS!
		String r = "SomeToStringClass:\nparam0 ";
		r += param0;
		r += "\nparam1 ";
		r += param1;
		r += "\n param2 ";
		r += param3;
		r += "\n param3 ";
		r += param2;
		return r;
	}

	//just to show how bad this is...
	@Benchmark
	public String plusEqualsConcatAntiPatternLoop() {
		String[] params = { "SomeToStringClass:\nparam0 ", param0, "\nparam1 ", param1, "\n param2 ",
				param3, "\n param3 ", param2};
		String r = "";
		for (String param : params) {
			r += param;
		}

		return r;
	}

	@Benchmark
	public String slf4jMessageFormatter() {
		return org.slf4j.helpers.MessageFormatter
				.arrayFormat("SomeToStringClass:\nparam0 {}\nparam1 {}\n param2 {}\nparam3 {}",
						new Object[] { param0, param1, param3, param2})
				.getMessage();
	}

	@Benchmark
	public String concatBuilder() {
		return new StringBuilder()//
				.append("SomeToStringClass:\nparam0").append(param0)//
				.append("\nparam1 ").append(param1)//
				.append("\n param2 ").append(param3)//
				.append("\n param3 ").append(param2)//
				.toString();//
	}

	@Benchmark
	public String concatBuilder_preSized() {
		return new StringBuilder(188)//
				.append("SomeToStringClass:\nparam0 ").append(param0)//
				.append("\nparam1 ").append(param1)//
				.append("\n param2 ").append(param3)//
				.append("\n param3 ").append(param2)//
				.toString();//
	}


	// Here be dragons...
	// Some very special stuff - please dont do this :-) (its not worth it)


	@Benchmark
	public String concatManualLoop_newStringUnsafe() {
		char[] r = new char[188];
		int count = 0;
		int len;
		String[] params = { "SomeToStringClass:\nparam0 ", param0, "\nparam1 ", param1, "\n param2 ",
				param3, "\n param3 ", param2};

		for (String str : params) {
			len = str.length();
			str.getChars(0, len, r, count);
			count += len;
		}

		return SharedSecrets.getJavaLangAccess().newStringUnsafe(r);
	}

	@Benchmark
	public String concatManualUnrolled_newStringUnsafe() {
		char[] r = new char[188];
		int count = 0;
		int len;

		len = "SomeToStringClass:\nparam0 ".length();
		"SomeToStringClass:\nparam0 ".getChars(0, len, r, count);
		count += len;

		len = param0.length();
		param0.getChars(0, len, r, count);
		count += len;

		len = "\nparam1 ".length();
		"\nparam1 ".getChars(0, len, r, count);
		count += len;

		len = param1.length();
		param1.getChars(0, len, r, count);
		count += len;

		len = "\n param2 ".length();
		"\n param2 ".getChars(0, len, r, count);
		count += len;

		len = param3.length();
		param3.getChars(0, len, r, count);
		count += len;

		len = "\n param3 ".length();
		"\n param3 ".getChars(0, len, r, count);
		count += len;

		len = param2.length();
		param2.getChars(0, len, r, count);
		count += len;

		return SharedSecrets.getJavaLangAccess().newStringUnsafe(r);
	}

	// *insert into pre-filled* variant
	// This variant only works if the length of the tokens never changes!!!
	private int[] insertPos = { 31, 59, 106, 152 };
	private char[] buffer = concatString().toCharArray();
	String[] tokens = { param0, param1, param3, param2};

	@Benchmark
	public String concatManualPreCalculated_sharedBuffer() {
		for (int i = 0; i < tokens.length; i++) {
			String token = tokens[i];
			token.getChars(0, token.length(), buffer, insertPos[i]);
		}
		return new String(buffer);
	}



	// VERIFICATION

	private static void verifyMethodsProduceSameResults() {
		MessageFormatVsStringFormatJMH b = new MessageFormatVsStringFormatJMH();
		String expected =b.concatString();
		System.out.println("Expected: " + expected);
		Arrays.stream(MessageFormatVsStringFormatJMH.class.getMethods())
				.filter(m -> m.getAnnotation(Benchmark.class) != null)
				.forEach(method -> b.methodProducesExpectedResult(method,expected ));
	}

	private void methodProducesExpectedResult(Method method, String expected) {
		try {
			String r = (String) method.invoke(this, null);
			if (!r.equals(expected)) {
				throw new VerifyError(
						"ERROR: method '" + method.getName() + "' does not produce expected result. but returned:" + r);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
